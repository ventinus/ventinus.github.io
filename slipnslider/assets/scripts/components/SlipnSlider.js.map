{"version":3,"sources":["../../../../src/assets/scripts/components/SlipnSlider.js"],"names":[],"mappings":"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","file":"SlipnSlider.js","sourcesContent":["// Features to add:\n//  autoplay, slides to show at a time, paging/how they transition (flowing behind\n//  instead of strictly left and right)\n\nexport default class SlipnSlider {\n  constructor(element, options) {\n    /**\n     * Flag for detecting if slider is enabled\n     * @type {Boolean}\n     * @default false\n     */\n    this.isEnabled = false;\n\n    /**\n     * The list of options able to be set by user on slider\n     * creation. If any property is left unset, it will default\n     * to the option specified here.\n     * @type {Object}\n     */\n    this.optionableProperties = {\n      isInfinite: false,\n      hasDotNav: true,\n      hasControls: true,\n      navContainer: '.slipnslider',\n      dotsContainer: '.slipnslider',\n      navText: ['prev', 'next'],\n      slideElement: 'div',\n      stageElement: 'div',\n      slidePadding: 10,\n      slidesPerPage: 1,\n      prevNavigationCallback: function() { console.log('prev callback'); },\n      nextNavigationCallback: function() { console.log('next callback'); },\n      responsive: {}\n    };\n\n    /**\n     * Collection of breakpoints specified through options\n     * @type {Array}\n     */\n    this.breakpoints = [];\n\n    /**\n     * Current minimum width breakpoint\n     * @type {Number}\n     */\n    this.currentBreakpoint = 0;\n\n    /**\n     * User options object of settable properties\n     * @type {Object}\n     */\n    this.options = options;\n\n    /**\n     * Class of the slider istance for selecting slider element\n     * @type {String}\n     */\n    this.slider = element;\n\n    /**\n     * The amount of slides in slider\n     * @type {Number}\n     */\n    this.total = 0;\n\n    /**\n     * Calculation of the width of each slide in percent\n     * @type {Number}\n     * @default 0\n     */\n    this.slideWidth = 0;\n\n    /**\n     * The amount of dots created for navigation\n     * @type {Number}\n     * @default 0\n     */\n    this.dotsCount = 0;\n\n    /**\n     * Value of amount the slider shifts by. Gets set to the\n     * width of a slide and the slidePadding to the left.\n     * @type {Number}\n     * @default 0\n     */\n    this.slideBy = 0;\n\n    /**\n     * Index number of the current active slide\n     * @type {Number}\n     * @default 0\n     */\n    this.activeSlideIndex = 0;\n\n    /**\n     * Index number of the current active nav dot\n     * @type {Number}\n     * @default 0\n     */\n    this.activeDotIndex = 0;\n\n    /**\n     * Determines type of event based of device type\n     * Either touch or mouse event\n     * @type {Event Handler}\n     */\n    this.pressStart = '';\n\n    /**\n     * Determines type of event based of device type\n     * Either touch or mouse event\n     * @type {Event Handler}\n     */\n    this.pressEnd = '';\n\n    /**\n     * Determines type of event based of device type\n     * Either touch or mouse event\n     * @type {Event Handler}\n     */\n    this.pressMove = '';\n\n    /**\n     * Flag for determining if slide is transitioning\n     * to another slide\n     * @type {Boolean}\n     * @default false\n     */\n    this.isTransitioning = false;\n\n    /**\n     * Classname for adding visibility of dots\n     * @type {String - CSS class}\n     */\n    this.dotIsActive = 'slipnslider__active';\n\n    /**\n     * Accurate vendor prefix for adding event listener\n     * for transitionEnd event. From Modernizr\n     * @type {String}\n     */\n    this.transitionEndPrefix = this.transitionEndEvent();\n\n    /**\n     * Vendor prefix for transition\n     * @type {String}\n     */\n    this.transitionPrefix = this.transitionPrefix();\n\n    /**\n     * Vendor prefix for transform\n     * @type {String}\n     */\n    this.transformPrefix = this.transformPrefix();\n\n    /**\n     * The Y position of the touch point to maintain\n     * scrolling on touch devices\n     * @type {Number}\n     * @default 0\n     */\n    this.curYPos = 0;\n\n    /**\n     * Caches the value of the x coordinate\n     * when the user clicks/touches to drag slider\n     * @type {Number}\n     * @default 0\n     */\n    this.startpoint = 0;\n\n    /**\n     * Flag for determining if slider is being dragged\n     * @type {Boolean}\n     * @default false\n     */\n    this.isDragging = false;\n\n    /**\n     * Minimum pixel amount to drag slider to\n     * initiate slide change. Gets set to 25% of the\n     * stage width\n     * @type {Number}\n     * @default 30\n     */\n    this.dragThreshold = 30;\n\n    /**\n     * Flag to determine if the user has dragged\n     * beyond the horizontal threshold. Necessary for\n     * touch devices only\n     * @type {Boolean}\n     * @default false\n     */\n    this.brokeHorizontalThreshold = false;\n\n    /**\n     * [wasDragged description]\n     * @type {Boolean}\n     */\n    this.wasDragged = false;\n\n    this.isMobileDevice = false;\n\n    this.isAndroid = false;\n  }\n\n  // =========================================================\n  // On Initialization functions\n  // =========================================================\n  /**\n   * Parses through the options object provided by the user\n   * and sets the properties accordingly. Verifies that option\n   * is one that can be set by the user and checks the typeof\n   * the option for proper and desired behaviour.\n   * @return {SlipnSlider}\n   */\n  takeUserOptions() {\n    this.options = this.options || {};\n    for (let option in this.optionableProperties) {\n      if (this.optionableProperties[option] !== undefined && typeof this.optionableProperties[option] === typeof this.options[option]) {\n        this[option] = this.options[option];\n      } else {\n        this[option] = this.optionableProperties[option];\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Runs through the breakpoints specified in the responsive property, stores\n   * each breakpoint and finds which breakpoint we are currently in.\n   * @return {Slipnslider}\n   */\n  parseResponsive() {\n    let windowWidth = window.innerWidth;\n    for (let breakpoint in this.responsive) {\n      breakpoint = parseInt(breakpoint);\n      this.breakpoints.push(breakpoint);\n      if (breakpoint < windowWidth) {\n        this.currentBreakpoint = breakpoint;\n      }\n    }\n\n    if (this.breakpoints.length === 0) { return this; }\n\n    this.applyCurrentBreakptProps();\n\n    return this;\n  }\n\n  /**\n   * Overwrites any defaults or options set with the options\n   * specified for the current breakpoint.\n   * @return {Slipnslider}\n   */\n  applyCurrentBreakptProps() {\n    for (let item in this.responsive[this.currentBreakpoint]) {\n      if (typeof this.responsive[this.currentBreakpoint][item] === typeof this[item]) {\n        this[item] = this.responsive[this.currentBreakpoint][item];\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Clones the first and last slide and appends each\n   * to the opposite end of the slider to have that\n   * oh so pleasurable infinite feel. Updates the values\n   * of the slide elements, total count, percent width,\n   * and sets the activeSlideIndex to 1.\n   * @return {SlipnSlider}\n   */\n  setupInfiniteSlider() {\n    if (!this.isInfiniteOverride) {\n      return this;\n    }\n\n    let times = this.slidesPerPage + 1;\n    for (let i = 0; i < times; i++) {\n      let slide = this.slides[i].cloneNode(true);\n      this.stage.appendChild(slide);\n    }\n\n    let lastSlideIndex = this.total - 1;\n    for (let i = lastSlideIndex; i > lastSlideIndex - times; i--) {\n      let slide = this.slides[lastSlideIndex].cloneNode(true);\n      this.stage.insertBefore(slide, this.slides[0]);\n    }\n\n    this.total      = this.slides.length;\n    this.activeSlideIndex = this.slidesPerPage + 1;\n\n    // need additional dots for more than 1 slide per page\n    if (this.slidesPerPage > 1) {\n      for (let i = 0, j = this.slidesPerPage - 1; i < j; i++) {\n        this.dotNav.appendChild(document.createElement('li'));\n        this.dotsCount++;\n      }\n    }\n    // Recache the dots\n    this.navDots = this.dotNav.children;\n    this.dotsCount = this.navDots.length;\n\n    return this;\n  }\n\n  /**\n   * Wraps the slides with the stage and appends it\n   * to the slider. Updates the values of slide elements,\n   * total count, percentage, and sets the width of the slides.\n   * @return {SlipnSlider}\n   */\n  setStage() {\n    this.stage = document.createElement(this.stageElement);\n    this.stage.className = 'slipnslider__stage';\n    this.slides = this.slider.children;\n    this.total = this.slides.length;\n\n    for (let i = 0; i < this.total; i++) {\n      let slide = this.slides[0].cloneNode(true);\n      this.slider.removeChild(this.slides[0]);\n      this.stage.appendChild(slide);\n    }\n\n    this.slider.appendChild(this.stage);\n    this.stage = this.slider.children[0];\n    this.slides = this.stage.children;\n\n    return this;\n  }\n\n  /**\n   * Checks if there are enough slides for the desired setup\n   * to prevent odd and unwanted behaviour\n   * @return {Slipnslider}\n   */\n  calcInitialProps() {\n    // Dont allow slides per page to exceed the total amount of slides\n    if (this.slidesPerPage > this.total) { this.slidesPerPage = this.total; }\n    this.dotsCount = this.total - (this.slidesPerPage - 1);\n\n    // Disallow nav and infinite becaause there is nowhere to go\n    if (this.dotsCount <= 1) {\n      this.hasDotNavOverride = false;\n      this.hasControlsOverride = false;\n      this.isInfiniteOverride = false;\n      return this;\n    } else {\n      this.hasDotNavOverride = this.hasDotNav;\n      this.hasControlsOverride = this.hasControls;\n      this.isInfiniteOverride = this.isInfinite;\n    }\n\n    return this;\n  }\n\n  /**\n   * Creates the DOM elements with instance-specific class names\n   * for dot navigation. Sets active class to current slide and\n   * appends dotNav to the slider\n   * @return {SlipnSlider}\n   */\n  createDots() {\n    let targetElement = document.querySelector(this.dotsContainer);\n\n    this.dotNav = document.createElement('ul');\n    this.dotNav.className = 'slipnslider__dot-nav';\n    for ( let i = 0; i < this.dotsCount; i++ ) { this.dotNav.appendChild(document.createElement('li')); }\n    this.navDots = this.dotNav.querySelectorAll('li');\n    this.activeDot = this.navDots[this.activeSlideIndex];\n    this.activeDot.className = this.dotIsActive;\n    targetElement.appendChild(this.dotNav);\n\n    let dispStyle = !this.hasDotNavOverride ? 'none' : '';\n    this.dotNav.style.display = dispStyle;\n\n    return this;\n  }\n\n  /**\n   * Searches for an optionally provided element to\n   * append controls wrapper to. Creates a controls\n   * wrapping element and appends the prev and next\n   * buttons as children and caches them as properties\n   * of the slider.\n   * @return {SlipnSlider}\n   */\n  createControls() {\n    if (!this.hasControlsOverride || this.total  === 1) { return this; }\n    let targetElement = document.querySelector(this.navContainer);\n    let controlsWrapper = document.createElement('div');\n    controlsWrapper.className = 'slipnslider__controls';\n    this.prevBtn = document.createElement('button');\n    this.prevBtn.className = 'slipnslider__prev';\n    this.prevBtn.type = 'button';\n    this.prevBtn.innerHTML = this.navText[0];\n    this.nextBtn = document.createElement('button');\n    this.nextBtn.className = 'slipnslider__next';\n    this.nextBtn.type = 'button';\n    this.nextBtn.innerHTML = this.navText[1];\n    controlsWrapper.appendChild(this.prevBtn);\n    controlsWrapper.appendChild(this.nextBtn);\n    targetElement.appendChild(controlsWrapper);\n\n    return this;\n  }\n\n  /**\n   * Ensures accurate context of this is passed to the event\n   * handlers\n   * @return {SlipnSlider}\n   */\n  addEventHandlers() {\n    this.onNextClickHandler   = this.determineAction.bind(this, true);\n    this.onPrevClickHandler   = this.determineAction.bind(this, false);\n    this.onDotClickHandler    = this.onDotClick.bind(this);\n    this.onDragStartHandler   = this.onDragStart.bind(this);\n    this.onDragHandler        = this.onDrag.bind(this);\n    this.offDragHandler       = this.offDrag.bind(this);\n    this.keydownHandler       = this.onKeyDown.bind(this);\n    this.onResizeHandler      = this.onWindowResize.bind(this);\n    this.onSliderClickHandler = this.onSliderClick.bind(this);\n    return this;\n  }\n\n  /**\n   * Enables the slider and adds the event listeners\n   * @return {SlipnSlider}\n   */\n  enable() {\n    if (this.isEnabled) { return this; }\n\n    this.isEnabled = true;\n\n    // Prevent event handlers from being set if there aren't\n    // any other slides to slide to\n    window.addEventListener('resize', this.onResizeHandler, false);\n\n    if (this.dotsCount <= 1) { return this; }\n\n    if (this.hasControlsOverride) {\n      this.nextBtn.addEventListener('click', this.onNextClickHandler, false);\n      this.prevBtn.addEventListener('click', this.onPrevClickHandler, false);\n    }\n\n    if (this.hasDotNavOverride) {\n      for (let i = 0, j = this.navDots.length; i < j; i++) {\n        this.navDots[i].addEventListener('click', this.onDotClickHandler, false);\n      }\n    }\n\n    this.stage.addEventListener(this.pressStart, this.onDragStartHandler, false);\n    this.stage.addEventListener('click', this.onSliderClickHandler, false);\n\n    window.addEventListener(this.pressMove, this.onDragHandler, false);\n    window.addEventListener(this.pressEnd, this.offDragHandler, false);\n\n    // check for not mobile to attach keystroke eventhandler\n    if (this.pressStart === 'mousedown') {\n      window.addEventListener('keydown', this.keydownHandler, false);\n    }\n\n    return this;\n  }\n\n  /**\n   * Disables the slider by removing the event listeners\n   * and restores the slider to initial state before\n   * intialization of the slider\n   * @return {SlipnSlider}\n   */\n  disable() {\n    if (!this.isEnabled) { return this; }\n\n    this.isEnabled = false;\n\n    if (this.hasControlsOverride) {\n      this.nextBtn.removeEventListener('click', this.onNextClickHandler, false);\n      this.prevBtn.removeEventListener('click', this.onPrevClickHandler, false);\n    }\n\n    if (this.hasDotNavOverride) {\n      for (let i = 0, j = this.navDots.length; i < j; i++) {\n        this.navDots[i].removeEventListener('click', this.onDotClickHandler, false);\n      }\n    }\n\n    this.stage.removeEventListener(this.pressStart, this.onDragStartHandler, false);\n    this.stage.removeEventListener('click', this.onSliderClickHandler, false);\n\n    window.removeEventListener(this.pressMove, this.onDragHandler, false);\n    window.removeEventListener(this.pressEnd, this.offDragHandler, false);\n    window.removeEventListener('resize', this.onResizeHandler, false);\n\n    if (this.pressStart === 'mousedown') {\n      window.removeEventListener('keydown', this.keydownHandler, false);\n    }\n\n    this.removeCreatedElements();\n\n    return this;\n  }\n\n  /**\n   * Removes all the created elements from initialization\n   * and restores intial states.\n   * @return {SlipnSlider}\n   */\n  removeCreatedElements() {\n    if (this.hasControlsOverride) {\n      // controls may be appended elsewhere\n      this.prevBtn.parentElement.parentElement.removeChild(this.prevBtn.parentElement);\n    }\n\n    this.dotNav.parentElement.removeChild(this.dotNav);\n\n    if (this.isInfiniteOverride) {\n      // need to remove the last ones first otherwise the this.total\n      // number wont be accurate\n      let count = this.slidesPerPage + 1;\n      for (let i = this.total - 1, j = this.total - 1 - count; i > j; i--) {\n        this.stage.removeChild(this.slides[i]);\n      }\n      for (let i = 0; i < count; i++) {\n        this.stage.removeChild(this.slides[0]);\n      }\n\n      this.total -= count * 2;\n    }\n\n    for (let i = 0, j = 0; i < this.total; i++) {\n      this.slides[j].style.width = '100%';\n      this.slides[j].style.marginLeft = '0';\n      this.slider.appendChild(this.slides[j]);\n    }\n\n    this.slider.removeChild(this.stage);\n    this.slider.display = 'none';\n    return this;\n  }\n\n  // =========================================================\n  // Event Listeners\n  // =========================================================\n\n  /**\n   * Ensures to preventDefault when the slides are anchor tags and\n   * the slider had been dragged and released while still above the slider\n   * @param  {Object} e Event click data\n   * @return {Slipnslider}\n   */\n  onSliderClick(e) {\n    if (this.wasDragged) {\n      e.preventDefault();\n    }\n\n    this.wasDragged = false;\n\n    return this;\n  }\n\n  /**\n   * Checks for when the user enters a different breakpoint\n   * and decides to rebuild the slider\n   * @return {Slipnslider}\n   */\n  onWindowResize() {\n    this.defineSizes();\n    if (this.breakpoints.length === 0) {\n      return this;\n    }\n\n    let currentBreakIndex = this.breakpoints.indexOf(this.currentBreakpoint);\n    let windowWidth = window.innerWidth;\n\n    if (windowWidth >= this.breakpoints[currentBreakIndex + 1]) {\n      this.currentBreakpoint = this.breakpoints[currentBreakIndex + 1];\n      this.rebuildSlider();\n    } else if (currentBreakIndex > 0 && windowWidth < this.breakpoints[currentBreakIndex]) {\n      this.currentBreakpoint = this.breakpoints[currentBreakIndex - 1];\n      this.rebuildSlider();\n    }\n\n    return this;\n  }\n\n  /**\n   * Disables and resets current slide and dot indices back\n   * to the beginning and runs most of the init functions\n   * except for the parsing options function\n   * @return {Slipnslider}\n   */\n  rebuildSlider() {\n    this.activeSlideIndex = this.activeDotIndex = 0;\n    this.disable()\n        .applyCurrentBreakptProps()\n        .setStage()\n        .calcInitialProps()\n        .createDots()\n        .createControls()\n        .setupInfiniteSlider()\n        .defineSizes()\n        .navigateToSlide()\n        .addStageTransition()\n        .bindTransitionEvents()\n        .addEventHandlers()\n        .enable();\n\n    return this;\n  }\n\n  /**\n   * Sets the width of the slider stage as well as\n   * the contained slides\n   * @return {SlipnSlider}\n   */\n  defineSizes() {\n    this.removeStageTransition();\n    let totalPadding = (this.total - 1) * this.slidePadding;\n    this.slideWidth = Math.ceil((this.slider.offsetWidth - (this.slidePadding * (this.slidesPerPage - 1)) ) / this.slidesPerPage);\n    let stageWidth = (this.total * this.slideWidth) + totalPadding;\n    this.stage.style.width = `${stageWidth}px`;\n    this.dragThreshold = this.slider.offsetWidth / 4;\n    this.slideBy = this.slideWidth + this.slidePadding;\n\n    // TODO: check if this.total is the same as this.slides.length\n    for (let i = 0, j = this.slides.length; i < j; i++) {\n      this.slides[i].style.width = `${this.slideWidth}px`;\n      this.slides[i].style.marginLeft = `${this.slidePadding}px`;\n    }\n\n    this.navigateToSlide()\n        .addStageTransition();\n    return this;\n  }\n\n  /**\n   * Navigates the slider to an adjacent slide. Wraps\n   * to opposite end if slider is not in infinite mode\n   * and default behaviour is to increment or decrement\n   * based on value of direction.\n   * @param  {Boolean} direction True navigates forward and False navigates backwards\n   * @param  {Event Obj} e       Optional event data\n   * @return {SlipnSlider}\n   */\n  determineAction(direction, e) {\n    if (this.isTransitioning) { return this; }\n    this.onTransitionStart();\n\n    if (direction) {\n      this.nextNavigationCallback();\n    } else {\n      this.prevNavigationCallback();\n    }\n\n    if (direction && this.atLastSlide()) {\n      this.activeDotIndex = 0;\n      if (!this.isInfiniteOverride) {\n        this.activeSlideIndex = 0;\n      } else {\n        this.activeSlideIndex++;\n      }\n    } else if (!direction && this.atFirstSlide()) {\n      this.activeDotIndex = this.dotsCount - 1;\n      if (!this.isInfiniteOverride) {\n        this.activeSlideIndex = this.dotsCount - 1;\n      } else {\n        this.activeSlideIndex--;\n      }\n      // Using dotsCount because total will cause it to navigate beyond the slides\n      // when multiple slides per page\n    } else {\n      if (direction) {\n        this.activeSlideIndex++;\n        this.activeDotIndex++;\n      } else {\n        this.activeSlideIndex--;\n        this.activeDotIndex--;\n      }\n    }\n\n    this.navigateToSlide();\n    return this;\n  }\n\n  /**\n   * Action to execute when left and right arrows are\n   * pressed for navigation.\n   * @param  {Event Obj} e Event data for the keydown event\n   * @return {SlipnSlider}\n   */\n  onKeyDown(e) {\n    if (e.srcElement.localName !== 'body') { return this; }\n    // might want to have a debounce to limit calls but behaves\n    // as anticipated and isnt too overloading\n    if (event.keyCode === 37) {\n      this.determineAction(false);\n    } else if (e.keyCode === 39) {\n      this.determineAction(true);\n    }\n\n    return this;\n  }\n\n  /**\n   * Finds the slide to navigate to corresponding to the\n   * index number of the clicked dot. Sets the activeSlideIndex\n   * to the target slide index.\n   * @param  {Event Obj} e Event click data\n   * @return {SlipnSlider}\n   */\n  onDotClick(e) {\n    e.preventDefault();\n    if (this.isTransitioning) { return this; }\n    let dotIndex = Array.prototype.indexOf.call(this.navDots, e.currentTarget);\n    if (dotIndex === this.activeDotIndex) {\n      return this;\n    }\n    this.onTransitionStart();\n    this.activeDotIndex = this.activeSlideIndex = dotIndex;\n    if (this.isInfiniteOverride) {\n     this.activeSlideIndex += this.slidesPerPage + 1;\n    }\n\n    this.navigateToSlide();\n\n    return this;\n  }\n\n  /**\n   * Event listener for the start of dragging the slider. Stores the\n   * current x coordinate and the y coordinate of device is a touch device\n   * so that scrolling is still possible.\n   * @param  {Event Obj} e Event touch/click data\n   * @return {SlipnSlider}\n   */\n  onDragStart(e) {\n    // e.preventDefault();\n    if (this.isTransitioning) { return this; }\n\n    // if( navigator.userAgent.match(/Android/i) ) {\n    //   e.preventDefault();\n    // }\n\n    this.removeStageTransition();\n    this.isDragging = true;\n\n    // if (this.pressStart === 'touchstart') {\n    let eData = this.isAndroid ? e.touches[0] : e;\n\n    if (this.isMobileDevice) {\n      this.brokeHorizontalThreshold = false;\n      this.curYPos = eData.pageY;\n    }\n\n    this.startpoint = eData.pageX;\n\n    return this;\n  }\n\n  /**\n   * Handles moving the slider according to users movements\n   * and scrolling if on a touch device. Prevents slider\n   * from moving beyond the first and last slide if not\n   * in infinite mode.\n   * @param  {Event Obj} e Event Drag data\n   * @return {SlipnSlider}\n   */\n  onDrag(e) {\n    if (this.isTransitioning || !this.isDragging) { return this; }\n    let eData = this.isAndroid ? e.touches[0] : e;\n    // flag for preventing default click event when slides are anchor tags\n    this.wasDragged = true;\n\n    // if (this.pressMove === 'touchmove') {\n    if (this.isMobileDevice) {\n      // Check to see if user is moving more vertically than horizontally\n      // to then disable the drag\n      let yMvt = Math.abs(this.curYPos - eData.pageY);\n      let xMvt = Math.abs(this.startpoint - eData.pageX);\n      if (xMvt > 20) {\n        this.brokeHorizontalThreshold = true;\n        e.preventDefault();\n      }\n      if (!this.brokeHorizontalThreshold) {\n        if (xMvt <= 20 && yMvt >= 10 && yMvt > xMvt) {\n          this.isDragging = false;\n          this.stage.style[this.transitionPrefix] = 'all .75s';\n          this.navigateToSlide();\n          return this;\n        }\n      }\n    }\n\n    let currentPos  = ((this.activeSlideIndex * this.slideWidth) + (this.slidePadding * this.activeSlideIndex)) * -1;\n    let movePos     = currentPos - ((this.startpoint - eData.pageX) * 0.7);\n\n    if (!this.isInfiniteOverride) {\n      // Dividing by 4 and multiplying by 0.75 allows a\n      // peek over either end by a quarter of slide width\n      if (movePos >= this.slider.offsetWidth / 4) {\n        movePos = this.slider.offsetWidth / 4;\n      } else if (movePos <= -this.stage.offsetWidth + (this.slider.offsetWidth * 0.75)) {\n        movePos = -this.stage.offsetWidth + (this.slider.offsetWidth * 0.75);\n      }\n    }\n\n    this.stage.style[this.transformPrefix] = `translate3d(${movePos}px, 0, 0)`;\n\n    return this;\n  }\n\n  /**\n   * Reinstantiates the stage transition and determines\n   * if and which slide to move to based on the ending\n   * x coordinate and the startpoint\n   * @param  {Event Obj} e Event data from touchup/mouseup\n   * @return {SlipnSlider}\n   */\n  offDrag(e) {\n    if (!this.isDragging) { return this; }\n    if (this.isAndroid) { e.preventDefault(); }\n    this.isDragging = false;\n    this.stage.style[this.transitionPrefix] = 'all .75s';\n    let eData = this.isAndroid ? e.touches[0] : e;\n    let travelled = e !== undefined ? this.startpoint - eData.pageX : 0;\n\n    if (Math.abs(travelled) >= this.dragThreshold) {\n      if (this.isInfiniteOverride) {\n        if (travelled > 0) {\n          this.determineAction(true);\n        } else {\n          this.determineAction(false);\n        }\n      } else {\n        if (travelled < 0 && !this.atFirstSlide()) {\n          this.determineAction(false);\n        } else if (travelled > 0 && !this.atLastSlide()) {\n          this.determineAction(true);\n        } else {\n          this.navigateToSlide();\n        }\n      }\n    } else {\n      this.navigateToSlide();\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets isTransitioning flag to true to disable\n   * user interaction\n   * @return {SlipnSlider}\n   */\n  onTransitionStart() {\n    this.isTransitioning = true;\n    return this;\n  }\n\n  /**\n   * Listener for resetting the isTransitioning\n   * flag to false after slider is finished making\n   * its' way to the target slide\n   * @return {SlipnSlider}\n   */\n  onTransitionEnd() {\n    this.isTransitioning = false;\n    if (this.isInfiniteOverride) {\n      this.checkForSlideSwap();\n    }\n\n    return this;\n  }\n\n  /**\n   * Binds the transition end event to the stage and executes an\n   * optional callback function\n   * @param  {Function} callback Optional callback to execute on transition completion\n   * @return {SlipnSlider}\n   */\n  bindTransitionEvents(callback) {\n    if (this.transitionEndPrefix) {\n      this.stage.addEventListener(this.transitionEndPrefix, function(event, callback){\n        if (callback) { callback(); }\n        this.onTransitionEnd();\n      }.bind(this), false);\n    }\n\n    return this;\n  }\n\n  // =========================================================\n  // Utility functions\n  // =========================================================\n\n  /**\n   * Calculates the amount to reposition the slider\n   * to move to the current activeSlideIndex. If there\n   * is a dotNav, updates the classes of the previous active\n   * dot and the new one.\n   * @return {SlipnSlider}\n   */\n  navigateToSlide() {\n    let moveTo = this.activeSlideIndex * this.slideBy;\n\n    this.stage.style[this.transformPrefix] = `translate3d(-${moveTo}px,0,0)`;\n    if (this.hasDotNavOverride) {\n      this.activeDot.className = '';\n      this.activeDot  = this.navDots[this.activeDotIndex];\n      this.activeDot.className = this.dotIsActive;\n    }\n\n    return this;\n  }\n\n  /**\n   * Called on isInfinite mode to see if current\n   * slide is a cloned one. If so, switches to its\n   * uncloned brother\n   * @return {SlipnSlider}\n   */\n  checkForSlideSwap() {\n    if (this.activeDotIndex > 0 && this.activeSlideIndex <= this.slidesPerPage) {\n      this.swapSlides(true);\n    } else if (this.activeDotIndex === 0 && this.activeSlideIndex >= this.total - this.slidesPerPage - 1) {\n      this.swapSlides(false);\n    }\n    return this;\n  }\n\n  /**\n   * Handles the actual switcharoo of between a cloned\n   * slide and its brother by updated the activeSlideIndex,\n   * removes the transition time, navigates to the new slide,\n   * and restores transition time.\n   * @param  {Boolean} direction True navigates to last uncloned slide, false to first uncloned slide\n   * @return {SlipnSlider}\n   */\n  swapSlides(direction) {\n    let slidesPerPageShift = this.slidesPerPage + 1;\n    this.activeSlideIndex = direction ? this.total - slidesPerPageShift - 1 : slidesPerPageShift;\n    this.removeStageTransition()\n        .navigateToSlide()\n        .addStageTransition();\n\n    return this;\n  }\n\n  /**\n   * Sets the stage transition to 0 seconds\n   * @return {SlipnSlider}\n   */\n  removeStageTransition() {\n    this.stage.style[this.transitionPrefix] = 'all 0s';\n    return this;\n  }\n\n  /**\n   * Sets stage transition to default value after 1ms\n   * timeout so that there is a delay when chaining\n   * @return {SlipnSlider}\n   */\n  addStageTransition() {\n    setTimeout(() => {\n      this.stage.style[this.transitionPrefix] = 'all .75s';\n    }, 1);\n    return this;\n  }\n\n  /**\n   * Checks to see if slider is in the first position\n   * @return {Boolean} returns true is at first position\n   */\n  atFirstSlide() {\n    return (this.activeDotIndex === 0) ? true : false;\n  }\n\n  /**\n   * Checks to see if slider is in the last position\n   * @return {Boolean} returns true if at last position\n   */\n  atLastSlide() {\n    return (this.activeDotIndex === this.dotsCount - 1) ? true : false;\n  }\n\n  /**\n   * Loops through the prefixes for transitionend to grab\n   * the correct prefix for the current browser. From Modernizr\n   * @return {String} transitionend prefix for current browser\n   */\n  transitionEndEvent() {\n    let t;\n    let el = document.createElement('fakeelement');\n    let transitions = {\n      'transition':'transitionend',\n      'OTransition':'oTransitionEnd',\n      'MozTransition':'transitionend',\n      'WebkitTransition':'webkitTransitionEnd'\n    };\n\n    for(t in transitions){\n      if( el.style[t] !== undefined ){\n        return transitions[t];\n      }\n    }\n  }\n\n  /**\n   * Retrieves the correct transition prefix with what\n   * exists in the users browser\n   * @return {String} Transition Prefix\n   */\n  transitionPrefix() {\n    let t;\n    let el = document.createElement('fakeelement');\n    let transitions = {\n      'transition':'transition',\n      'OTransition':'oTransition',\n      'MozTransition':'transition',\n      'WebkitTransition':'webkitTransition'\n    };\n\n    for(t in transitions){\n      if( el.style[t] !== undefined ){\n        return transitions[t];\n      }\n    }\n  }\n\n  /**\n   * Retrieves the correct transform prefix\n   * with what exists in the users browser\n   * @return {String} Transform Prefix\n   */\n  transformPrefix() {\n    let t;\n    let el = document.createElement('fakeelement');\n    let transforms = {\n      'transform':'transform',\n      'OTransform':'oTransform',\n      'MozTransform':'mozTransform',\n      'WebkitTransform':'webkitTransform'\n    };\n\n    for(t in transforms){\n      if( el.style[t] !== undefined ){\n        return transforms[t];\n      }\n    }\n  }\n\n  determineBrowserEvents() {\n    let start, end, move;\n    if ('ontouchstart' in window) {\n      start = 'touchstart';\n      end = 'touchend';\n      move = 'touchmove';\n      this.isMobileDevice = true;\n      if ( navigator.userAgent.match(/Android/i) ) { this.isAndroid = true; }\n    } else if (window.PointerEvent) {\n      start = 'pointerdown';\n      end = 'pointerup';\n      move = 'pointermove';\n    } else if (window.MSPointerEvent) {\n      start = 'MSPointerDown';\n      end = 'MSPointerUp';\n      move = 'MSPointerMove';\n    } else {\n      start = 'mousedown';\n      end = 'mouseup';\n      move = 'mousemove';\n    }\n\n    this.pressStart = start;\n    this.pressEnd = end;\n    this.pressMove = move;\n\n    return this;\n  }\n\n  // =========================================================\n  // Initialization function\n  // =========================================================\n  /**\n   * Initialization function for setting up\n   * and enabling the slider\n   * @return {SlipnSlider}\n   */\n  init() {\n    this.determineBrowserEvents()\n        .takeUserOptions()\n        .parseResponsive()\n        .setStage()\n        .calcInitialProps()\n        .createDots()\n        .createControls()\n        .setupInfiniteSlider()\n        .defineSizes()\n        .navigateToSlide()\n        .addStageTransition()\n        .bindTransitionEvents()\n        .addEventHandlers()\n        .enable();\n\n    return this;\n  }\n}\n"]}